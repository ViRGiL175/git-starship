@startuml

package rape.brutal.gitstarship {

    class Universe {
        -int kills;
        -int spends;
        +void startUniverse();
        +void win();
        +void lose();
    }

    class Storage {
        -HashMap<String, IStorageable> storage
        +void add(String itemName);
        +void remove(String itemName);
        -int capacity;
    }

    package trade {

        abstract class Trader {
            -int cash;
        }

        class BaseTrader extends Trader {
            +void trade();
        }

        class Mechanic extends Trader {
            +void repair(int cash, String itemName);
            +void upgrade(int cash, String itemName);
        }

    }

    package events {

        +abstract class Event {
            #Universe universe;
            #Location location;
            #GitStarship gitStarship;

            +void start(GitStarship gitStarship);
        }

        +class Battle extends Event {

        }

    }

    interface ILandable {
        +void land(GitStarship gitStarship);
    }

    package locations {

        +abstract class Location {
            #GitStarship gitStarship;
        }

        +class Planet extends Location implements ILandable {
            -Trader trader;
            -Storage storage;
        }

        +class Asteroid extends Location  implements ILandable {
            -Trader trader;
            -Storage storage;
        }

        +class OpenSpace extends Location {
            -ArrayList<Starship> ships;
        }

    }

    interface IAttackable {
        +void setDamage(int damage);
        +int getHitPoints();
    }

    package ships {

        Starship <|-- GitStarship
        Starship <|-- PirateStarship

        abstract class Starship implements IAttackable {
            #Engine engine;
            #Hull hull;
            #Storage storage;

            +boolean putInStorage(IStoregable iStoregable);
            +IStoregable getFromStorage(String iStoregableName);
            +void trade(Trader trader);
            +void attack(IAttackable iAttackable);
        }

        class GitStarship {

        }

        class PirateStarship {

        }

    }

    interface IStorageable {
        +int getSize();
        +String getName();
    }

    package parts {

        abstract class ShipPart implements IStorageable {
            -int size;
        }

        class Hull extends ShipPart {
            -Gun gun[8];
            +void addGun();
            +void removeGun();
        }

        class Engine extends ShipPart {
            -int condition;
            -int power;
        }

    }

    package ammunition {

        Turret o-- Magazine
        Magazine o- Ammo

        +abstract class Gun implements IStorageable {
            #int damage;
            #String name;
            #int size;

            +int fire();
        }

        +class Turret extends Gun {
            -Magazine loadedMagazine;

            +void reload(Magazine magazine);
        }

        +class Railgun extends Gun {

        }

        +class Magazine implements IStorageable {
            -int capacity;
            -Ammo[] ammo;
            -String name;
            -int size;

            +void removeAmmo();
        }

        +class Ammo {
            -int damageIncreasing;

            +int getDamageIncreasing();
        }

    }

}

@enduml