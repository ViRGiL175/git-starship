@startuml

package rape.brutal.gitstarship {

    class Universe {
        -int kills;
        -int moneySpends;
        +void journeyState();
        +void winState();
        +void loseState();
        +void getStats();
    }

    class Storage {
        -HashMap<String, IStorageable> itemsHashMap;
        -int capacity;
        +Set<String> getAllItemNames();
        +void putItem(IStorageable iStorageable);
        +void getItem(String itemName);
    }

    package trade {

        abstract class Trader {
            #int cash;
            #Storage storage;
        }

        class AverageTrader extends Trader {
            +boolean sell(int cash, String itemName);
            +boolean buy(int cash, String itemName);
        }

        class Mechanic extends Trader {
            +boolean repair(int cash, String itemName);
            +boolean upgrade(int cash, String itemName);
        }

    }

    package events {

        +abstract class Event {
            #Universe universe;
            #Location location;
            #GitStarship gitStarship;

            +void Event(Universe universe, GitStarship gitStarship);
            +void start();
        }

    }

    interface ILandable {
        +void land(GitStarship gitStarship);
    }

    package locations {

        +abstract class Location {
            #GitStarship gitStarship;
            -Storage storage;
        }

        +class Planet extends Location implements ILandable {
            -Trader trader;
        }

        +class Asteroid extends Location  implements ILandable {
            -Trader trader;
        }

        +class OpenSpace extends Location {
            -ArrayList<Starship> ships;
        }

    }

    interface IAttackable {
        +void setDamage(int damage);
        +int getHitPoints();
    }

    package ships {

        Starship <|-- GitStarship
        Starship <|-- PirateStarship

        abstract class Starship implements IAttackable {
            #Engine engine;
            #Hull hull;
            #Storage storage;
            -int hitPoints;

            +void Starship(Engine engine, Hull hull, Storage storage, int hitPoints);
            +boolean putInStorage(IStoragable iStoragable);
            +IStoragable getFromStorage(String iStoragableName);
            +void trade(Trader trader);
            +void attack(IAttackable iAttackable);
        }

        class GitStarship {

        }

        class PirateStarship {

        }

    }

    interface IStorageable {
        +int getSize();
        +String getName();
    }

    package parts {
        abstract class ShipPart implements IStorageable {
            -int size;
            -String name;
        }

        class Hull extends ShipPart {
            -Gun gun[8];
            +void addGun();
            +void removeGun();
        }

        class Engine extends ShipPart {
            -int power;
        }

    }

    package ammunition {

        Turret o-- Magazine
        Magazine o- Ammo

        +abstract class Gun implements IStorageable {
            #int damage;
            #String name;
            #int size;

            +int fire();
        }

        +class Turret extends Gun {
            -Magazine loadedMagazine;

            +void reload(Magazine magazine);
        }

        +class Railgun extends Gun {

        }

        +class Magazine implements IStorageable {
            -int capacity;
            -Ammo[] ammo;
            -String name;
            -int size;

            +void removeAmmo();
        }

        +class Ammo {
            -int damageIncreasing;

            +int getDamageIncreasing();
        }

    }

    IValuable <|.. ShipPart
    IValuable <|.. Gun

    interface IValuable {
        +int getCost();
    }

    interface IMagnitable {
    }

    package stuff {
         +class Sheep implements IValuable, IStorageable{
             -int cost;
         }
         +class Shrapnel implements IValuable, IStorageable, IMagnitable {
             -int damage;
         }
    }

}

@enduml