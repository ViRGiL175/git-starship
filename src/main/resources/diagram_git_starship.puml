@startuml

package rape.brutal.gitstarship {

    package trade {

    abstract class Trader {
        -int cash;
    }

    class BaseTrader extends Trader {
        +void trade();
    }



    class Mechanic extends Trader {
        +void repair(int cash, String itemName);
        +void upgrade(int cash, String itemName);
    }

    }

    class Storage{
        -HashMap<String, IStorageable> storage
        +void add(String itemName);
        +void remove(String itemName);
        -int capacity;
    }

    interface IStorageable {
        +int getSize();
        +String getName();

    }

    interface IAttackable {
        +void setDamage(int damage);
        +int getHitPoints();
    }

        package ships {

            Starship <|-- GitStarship
            Starship <|-- PirateStarship

            abstract class Starship implements IAttackable {
                #Engine engine;
                #Hull hull;
                #Storage storage;

                +boolean putInStorage(IStoreable iStoreable);
                +IStoreable getFromStorage(String iStoreableName);
                +void trade(Trader trader);
                +void attack(IAttackable iAttackable);
            }

            class GitStarship {

            }

            class PirateStarship {

            }

        }

        package parts {

        abstract class ShipPart implements IStorageable {
        -int size;
        }

        class Hull extends ShipPart{
        -Gun gun[8];
        +addGun();
        +removeGun();
        }

        class Engine extends ShipPart{
        -int condition;
        -int power
        }
    }

    class Universe {
    -int kills;
    -int spends;
    +startUniverse();
    +win();
    +lose();
    }

}

@enduml